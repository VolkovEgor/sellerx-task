// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/VolkovEgor/sellerx-task/internal/repository (interfaces: Message)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/VolkovEgor/sellerx-task/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessage) Create(arg0 *model.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessage)(nil).Create), arg0)
}

// GetAllForChat mocks base method.
func (m *MockMessage) GetAllForChat(arg0 string) ([]*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForChat", arg0)
	ret0, _ := ret[0].([]*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForChat indicates an expected call of GetAllForChat.
func (mr *MockMessageMockRecorder) GetAllForChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForChat", reflect.TypeOf((*MockMessage)(nil).GetAllForChat), arg0)
}
