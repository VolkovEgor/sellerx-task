// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/VolkovEgor/sellerx-task/internal/repository (interfaces: User)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/VolkovEgor/sellerx-task/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(arg0 *model.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), arg0)
}

// ExistenceCheck mocks base method.
func (m *MockUser) ExistenceCheck(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistenceCheck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExistenceCheck indicates an expected call of ExistenceCheck.
func (mr *MockUserMockRecorder) ExistenceCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistenceCheck", reflect.TypeOf((*MockUser)(nil).ExistenceCheck), arg0)
}
